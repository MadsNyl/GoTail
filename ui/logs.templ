package ui

import (
  "fmt"

  "gotail/models"
  "gotail/ui/components"
  i "github.com/callsamu/templicons"
) 

script onOpenDrawer(id string) {
  document.getElementById(id).classList.toggle("lg:w-96");
  document.getElementById(id).classList.toggle("w-72");
  document.getElementById("body").classList.toggle("overflow-hidden");

  const backdrop = document.getElementById(id + "-backdrop");
  backdrop.classList.toggle("opacity-100");

  if (backdrop.classList.contains("opacity-100")) {
    backdrop.classList.remove("pointer-events-none");
    backdrop.classList.add("pointer-events-auto");
  } else {
    backdrop.classList.remove("pointer-events-auto");
    backdrop.classList.add("pointer-events-none");
  }
}

func firstN(n int, attrs map[string]any) map[string]any {
  result := make(map[string]any)
  count := 0
  for k, v := range attrs {
    if count >= n {
      break
    }
    result[k] = v
    count++
  }
  return result
}


templ LogsView(data struct {
	Logs     []models.LogEntry
	Page     int
	Limit    int
	Total    int
	Severity string
  AttrKeys []string
  AttrValue string
  AttrKey string
  CurrentUrl string
  TotalLogs int
}) {
  <!DOCTYPE html>
  <html lang="en" class="w-full h-full bg-gray-50/40 text-gray-900">
    <head>
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>GoTail</title>
      <script src="https://cdn.tailwindcss.com"></script>
      <style>
        html, body {
          height: 100%;
          margin: 0;
          padding: 0;
        }
      </style>
    </head>
    <body id="body" class="w-full h-full">
      @components.Sidebar(struct{CurrentUrl string}{CurrentUrl: data.CurrentUrl})
      
      for _, item := range data.Logs {
        @components.Drawer(struct{ID string}{ID: fmt.Sprintf("log-%d", item.ID)}){
          <div class="space-y-8">
            <div class="space-y-2">
              <h2 class="text-2xl font-semibold">
                Log Entry Details
              </h2>
              <p class="text-sm text-gray-500">
                Detailed information for log entry ID {item.ID}
              </p>
            </div>

            <div class="grid grid-cols-2 gap-x-4">
              <div class="text-start space-y-2">
                <h3 class="text-sm font-medium text-gray-500">
                  Severity
                </h3>
                @components.Severity(struct{Severity string}{Severity: item.SeverityText})
              </div>

              <div class="text-start space-y-2">
                <h3 class="text-sm font-medium text-gray-500">
                  Timestamp
                </h3>
                <p class="text-sm">
                  {item.Timestamp.Format("2006-01-02 15:04:05")}
                </p>
              </div>
            </div>

            <div class="text-start space-y-2">
              <h3 class="text-sm font-medium text-gray-500">
                Message
              </h3>
              <div class="p-2 bg-gray-100 rounded-lg w-full">
                <p class="text-sm">
                  {item.Body}
                </p>
              </div>
            </div>

            <div class="text-start space-y-2">
              <h3 class="text-sm font-medium text-gray-500">
                Service
              </h3>
              <p class="text-sm">
                if item.ServiceName != nil && *item.ServiceName != "" {
                  {*item.ServiceName}
                } else {
                  <span class="text-gray-400">No service name</span>
                }
              </p>
            </div>

            <div class="text-start space-y-2">
              <h3 class="text-sm font-medium text-gray-500">
                Host
              </h3>
              <p class="text-sm">
                if item.HostName != nil && *item.HostName != "" {
                  {*item.HostName}
                } else {
                  <span class="text-gray-400">No host name</span>
                }
              </p>
            </div>

            <div class="text-start space-y-2">
              <h3 class="text-sm font-medium text-gray-500">
                Attributes
              </h3>
              <div class="space-y-2">
                for k, v := range item.Attributes {
                  <div class="p-2 bg-gray-100 rounded-lg w-full flex items-center justify-between space-x-4">
                    <span class="text-sm font-medium">{k}</span>
                    <span class="text-sm text-end">{fmt.Sprintf("%v", v)}</span>
                  </div>
                } 
              </div>    
            </div>
          </div>
        }
      }

      <div class="lg:ml-64 px-2 py-6 lg:p-8 space-y-6">
        <div class="flex items-start justify-between space-x-8">
          <div class="space-y-2">
            <h1 class="text-2xl lg:text-3xl font-bold">Log Entries</h1>
            <p class="text-sm lg:text-md text-gray-500">
              Browse and filter log entries from your application.
            </p>
          </div>

          @components.MobileSidebar(struct{CurrentUrl string}{CurrentUrl: data.CurrentUrl})
        </div>

        <div class="w-full p-6 rounded-lg shadow-sm border space-y-4 bg-white">
          <div class="flex items-center space-x-2">
            @i.Icon("mdi:search", i.Params().SetDimensions(24, 24))
            <p class="text-2xl font-semibold">Filters</p>
          </div>
          <form method="GET" class="grid lg:grid-cols-3 lg:gap-x-4 gap-y-4 lg:gap-y-8 lg:items-end">
            <!-- Severity filter -->
            <div class="space-y-2">
              <label for="severity" class="block text-sm font-medium">
                Severity Level
              </label>
              <select
                name="severity"
                class="w-full border p-2 rounded-lg"
              >
                <option value="">All levels</option>
                <option value="INFO" selected?={data.Severity=="INFO"}>INFO</option>
                <option value="WARNING" selected?={data.Severity=="WARNING"}>WARNING</option>
                <option value="ERROR" selected?={data.Severity=="ERROR"}>ERROR</option>
                <option value="DEBUG" selected?={data.Severity=="DEBUG"}>DEBUG</option>
              </select>
            </div>

            <!-- Attribute key dropdown -->
            <div class="space-y-2">
              <label for="attr_key" class="block text-sm font-medium">
                Attribute Key
              </label>
              <select
                name="attr_key"
                class="w-full border p-2 rounded-lg"
              >
                <option value="">
                  Any attribute
                </option>
                for _, key := range data.AttrKeys {
                  <option
                    value={key}
                    selected?={data.AttrKey==key}
                  >
                    {key}
                  </option>
                }
              </select>
            </div>

            <!-- Attribute value input -->
            <div class="space-y-2">
              <label for="attr_value" class="block text-sm font-medium">
                Attribute Value
              </label>
              <input
                type="text"
                name="attr_value"
                placeholder="Search by value..."
                class="w-full border p-2 rounded-lg"
                value={data.AttrValue}
              />
            </div>

            <div>
              <input type="hidden" name="page" value="1"/>
            </div>

            <button
              type="submit"
              class="bg-[#0f172a] border border-[#0f172a] text-[#f8fafc] h-[42px] px-4 py-2 rounded-lg"
            >
              Search
            </button>
            <button
              type="reset"
              class="bg-gray-300 border border-gray-300 text-gray-900 px-4 py-2 rounded-lg h-[42px]"
              onclick="window.location.href='/'"
            >
              Reset
            </button>
          </form>
        </div>

        <div class="w-full p-6 rounded-lg shadow-sm border space-y-4 bg-white">
          <h1 class="text-xl font-semibold">
            Log Entries ({data.TotalLogs} total) 
          </h1>
        </div>

        <div class="flex justify-end">
          @components.Pagination(struct {
            Page       int
            Level      string
            AttrKey    string
            AttrValue  string
            TotalPages int
          }{
            Page:       data.Page,
            Level:      data.Severity,
            AttrKey:    data.AttrKey,
            AttrValue:  data.AttrValue,
            TotalPages: (data.Total + data.Limit - 1) / data.Limit,
          })
        </div>

        <div class="block lg:hidden space-y-4">
          for _, item := range data.Logs {
            <div 
              class="rounded-lg border bg-white shadow p-4 space-y-4 cursor-pointer"
              onClick={onOpenDrawer(fmt.Sprintf("log-%d", item.ID))}
            >
              <div class="flex w-full justify-between items-center">
                <p class="text-sm">{item.Timestamp.Format("2006-01-02 15:04:05")}</p>

                @components.Severity(struct{Severity string}{Severity: item.SeverityText})
              </div>

              <div class="space-y-2">
                <p class="text-sm text-gray-500 mt-2">Service</p>
                <div class="text-sm">
                  if item.ServiceName != nil && *item.ServiceName != "" {
                    {*item.ServiceName}
                  } else {
                    <span class="text-gray-400">N/A</span>
                  }
                </div>
              </div>

              <div class="space-y-2">
                <p class="text-sm text-gray-500 mt-2">Message</p>
                <p class="text-sm">{item.Body}</p>
              </div>

              <div class="space-y-2">
                <p class="text-sm text-gray-500 mt-2">Attributes</p>
                <div class="text-sm space-y-1">
                  for k, v := range firstN(3, item.Attributes) {
                    <div>
                      <span class="text-gray-600">{k}</span>: {fmt.Sprintf("%v", v)}
                    </div>
                  }
                  if len(item.Attributes) > 3 {
                    <span class="inline-block bg-gray-100 py-1 px-2 text-xs rounded mt-1">
                      + {len(item.Attributes) - 3} more
                    </span>
                  }
                </div>
              </div>
            </div>
          }
        </div>

        <table class="hidden lg:table w-full bg-white shadow rounded overflow-hidden">
          <thead class="bg-gray-100 text-left text-sm font-semibold">
            <tr>
              <th class="p-2">Time</th>
              <th class="p-2">Level</th>
              <th class="p-2">Service</th>
              <th class="p-2 w-[500px]">Message</th>
              <th class="p-2">Attributes</th>
            </tr>
          </thead>
          <tbody>
            for _, item := range data.Logs {
              <tr
                class="border-t cursor-pointer"
                onClick={onOpenDrawer(fmt.Sprintf("log-%d", item.ID))}
              >
                <td class="p-2">{item.Timestamp.Format("2006-01-02 15:04:05")}</td>
                <td class="p-2">
                  @components.Severity(struct{Severity string}{Severity: item.SeverityText})
                </td>
                <td class="2">
                  if item.ServiceName != nil && *item.ServiceName != "" {
                    <span>{*item.ServiceName}</span>
                  } else {
                    <span class="text-gray-400">N/A</span>
                  }
                </td>
                <td class="p-2">{item.Body}</td>
                <td class="p-2">
                  for k, v := range firstN(3, item.Attributes) {
                    <div>
                      <span class="text-gray-600">{k}</span>:
                      <span>{fmt.Sprintf("%v", v)}</span>
                    </div>
                  }
                  if len(item.Attributes) > 3 {
                    <span class="flex rounded-lg bg-gray-100 py-1 px-2 text-xs block w-fit mt-2">
                      + {len(item.Attributes) - 3} more
                    </span>
                  }
                </td>
              </tr>
            }
          </tbody>
        </table>

          <div class="mt-4 flex justify-end">
            @components.Pagination(struct {
              Page       int
              Level      string
              AttrKey    string
              AttrValue  string
              TotalPages int
            }{
              Page:       data.Page,
              Level:      data.Severity,
              AttrKey:    data.AttrKey,
              AttrValue:  data.AttrValue,
              TotalPages: (data.Total + data.Limit - 1) / data.Limit,
            })
          </div>
      </div>
    </body>
  </html>
}
