package ui

import (
    "time"
    "fmt"

    i "github.com/callsamu/templicons"

    "gotail/ui/components"
)

func ErrorPercentage(totalLogs int, severityCount map[string]int) string {
    errorLogs, exists := severityCount["ERROR"]

    if !exists {
        errorLogs = 0
    }

    if totalLogs == 0 {
        return "0%"
    }
    percentage := float64(errorLogs) / float64(totalLogs) * 100
    return fmt.Sprintf("%.2f%%", percentage)
}

func GetMapKey(mapInput map[string]int, mapKey string) int {
    if value, exists := mapInput[mapKey]; exists {
        return value
    }
    return 0
}

templ StatsView (data struct {
    Year            int
    Month           int
    TotalLogs       int
    SeverityCounts  map[string]int
    DailyCounts     map[int]int
    ServiceCounts   map[string]int
    AttributeCounts map[string]int
    CurrentUrl   	string
    PrevMonth       int
    PrevYear        int
    NextMonth       int
    NextYear        int
}) {
    <!DOCTYPE html>
    <html lang="en" class="w-full h-full bg-gray-50/40 text-gray-900">
        <head>
            <meta charset="UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>GoTail - Stats</title>
            <script src="https://cdn.tailwindcss.com"></script>
            <style>
                html, body {
                height: 100%;
                margin: 0;
                padding: 0;
                }
            </style>
        </head>
        <body
            id="body"
            class="w-full h-full"
        >
            @components.Sidebar(struct{CurrentUrl string}{CurrentUrl: data.CurrentUrl})

            <div class="lg:ml-64 px-2 py-6 lg:p-8 space-y-6">
                <div class="flex items-start justify-between space-x-8">
                    <div class="space-y-2">
                        <h1 class="text-2xl lg:text-3xl font-bold">
                            Statistics Dashboard
                        </h1>
                        <p class="text-sm lg:text-md text-gray-500">
                            View statistics about your logs, including total counts, severity breakdowns, and more.
                        </p>
                    </div>

                    @components.MobileSidebar(struct{CurrentUrl string}{CurrentUrl: data.CurrentUrl})
                </div>

                <div class="flex items-center space-x-4">
                    <!-- Previous Month -->
                    <a
                        href={"/stats?year=" + fmt.Sprintf("%d", data.PrevYear) + "&month=" + fmt.Sprintf("%d", data.PrevMonth)}
                        class="p-2 rounded-full hover:bg-gray-100"
                    >
                        @i.Icon("mdi:chevron-left", i.Params().SetDimensions(24, 24))
                    </a>

                    <!-- Current Month/Year -->
                    <div class="text-lg font-semibold">
                        {time.Month(data.Month).String()} {data.Year}
                    </div>

                    <!-- Next Month -->
                    <a
                        href={"/stats?year=" + fmt.Sprintf("%d", data.NextYear) + "&month=" + fmt.Sprintf("%d", data.NextMonth)}
                        class="p-2 rounded-full hover:bg-gray-100"
                    >
                        @i.Icon("mdi:chevron-right", i.Params().SetDimensions(24, 24))
                    </a>
                </div>
                
                <div class="grid lg:grid-cols-4 gap-4">
                    <div class="bg-white shadow-sm border rounded-lg p-4">
                        <h2 class="text-xl font-semibold mb-4">Total Logs</h2>
                        <p class="text-3xl font-bold">{data.TotalLogs}</p>
                    </div>
                    <div class="bg-white shadow-sm border rounded-lg p-4">
                       <h2 class="text-xl font-semibold mb-4">
                            Error Percentage
                        </h2>
                        <p class="text-3xl font-bold">
                            {ErrorPercentage(data.TotalLogs, data.SeverityCounts)}
                        </p>
                    </div>
                    <div class="bg-white shadow-sm border rounded-lg p-4">
                        <h2 class="text-xl font-semibold mb-4">
                            Active Services
                        </h2>
                        <p class="text-3xl font-bold">
                            {len(data.ServiceCounts)}
                        </p>
                    </div>
                    <div class="bg-white shadow-sm border rounded-lg p-4">
                        <h2 class="text-xl font-semibold mb-4">
                            Unique Attributes
                        </h2>
                        <p class="text-3xl font-bold">
                            {len(data.AttributeCounts)}
                        </p>
                    </div>
                </div>

                <!-- Daily Log Counts -->

                <!-- Service Counts -->

                <!-- Atribute Counts -->
                <div class="space-y-4 w-full">
                    for attribute, count := range data.AttributeCounts {
                        <div class="bg-white shadow-sm border rounded-lg p-4">
                            <h2 class="text-xl font-semibold mb-4">{attribute}</h2>
                            <p class="text-3xl font-bold">{count}</p>
                        </div>
                    }
                </div>

                <div class="grid lg:grid-cols-5 gap-4">
                    for _, i := range []string{"DEBUG", "INFO", "WARNING", "ERROR", "FATAL"} {
                        <div class="bg-white shadow-sm border rounded-lg p-4">
                            <h2 class="text-xl font-semibold mb-4">{i}</h2>
                            <p class="text-3xl font-bold">
                                {GetMapKey(data.SeverityCounts, i)}
                            </p>
                        </div>
                    }
                </div>
            </div>
        </body>
    </html>   
}